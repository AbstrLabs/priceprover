package com.abstrlabs.priceprover.circuits;

/*Generated by MPS */
import com.abstrlabs.priceprover.util.CircuitGenerator;
import backend.config.Config;
import backend.eval.SampleRun;
import java.math.BigInteger;
import backend.auxTypes.FieldElement;
import backend.eval.CircuitEvaluator;

public class Multiplier extends CircuitGenerator {



  public static void main(String[] args) {
    // This is the java main method. Its purpose is to make the Progam runnable in the environment 
    // This method can be left empty, or used to set Configuration params (see examples) 
    Config.writeCircuits = true;
    Config.outputFilesPath = "/home/bo/workspace/xjsnark/";
    new Multiplier();
  }

  public Multiplier() {
    super("Multiplier");
    generateCircuit();
    this.evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {
        a.mapValue(BigInteger.valueOf(666), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        b.mapValue(BigInteger.valueOf(233), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        c.mapValue(new BigInteger("16859244160838795927418746460488024577598986337222176196915211822104350152455"), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
      }
      public void post() {
      }

    });

  }



  public void __init() {
    a = new FieldElement(new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"), new BigInteger("0"));
    b = new FieldElement(new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"), new BigInteger("0"));
    c = new FieldElement(new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"), new BigInteger("0"));
    arr = (FieldElement[]) FieldElement.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{N}, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
  }

  public FieldElement a;
  public FieldElement b;
  public FieldElement c;
  public FieldElement[] arr;

  public static final int N = 100;
  @Override
  public void __defineInputs() {
    super.__defineInputs();
    a = FieldElement.createInput(this, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    c = FieldElement.createInput(this, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));















  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();

    b = FieldElement.createVerifiedWitness(this, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));


















  }
  public void outsource() {
    // Entry point for the circuit. Input and witness arrays/structs must be instantiated outside this method 
    arr[0].assign(a.mul(a).add(b));
    for (int i = 1; i < N; i++) {
      arr[i].assign(arr[i - 1].mul(arr[i - 1]).add(b));
    }
    c.forceEqual(arr[N - 1]);
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
