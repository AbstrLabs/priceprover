package com.abstrlabs.priceprover.circuits;

/*Generated by MPS */

import com.abstrlabs.priceprover.util.CircuitGenerator;
import backend.eval.SampleRun;
import java.math.BigInteger;
import backend.auxTypes.UnsignedInteger;
import backend.eval.CircuitEvaluator;
import backend.auxTypes.SmartMemory;


public class XorTest2 extends CircuitGenerator {



  public static void main(String[] args) {
    // This is the java main method. Its purpose is to make the Progam runnable in the environment 
    // This method can be left empty, or used to set Configuration params (see examples) 

    new XorTest2();
  }

  public XorTest2() {
    super("XorTest2");
    generateCircuit();
    this.evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {
        b.mapValue(new BigInteger("ab", 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        a.mapValue(new BigInteger("01", 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        c.mapValue(new BigInteger("aa", 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        d.mapValue(new BigInteger("ef", 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
      }
      public void post() {
      }

    });

  }



  public void __init() {
    a = new UnsignedInteger(8, new BigInteger("0"));
    b = new UnsignedInteger(8, new BigInteger("0"));
    c = new UnsignedInteger(8, new BigInteger("0"));
    d = new UnsignedInteger(8, new BigInteger("0"));
  }

  public UnsignedInteger a;
  public UnsignedInteger b;
  public UnsignedInteger c;
  public UnsignedInteger d;
  private SmartMemory<UnsignedInteger> sBoxMem;

  public static final int x = 0x63;
  public static final int[] SBOX = {3, 5};
  @Override
  public void __defineInputs() {
    super.__defineInputs();
    a = UnsignedInteger.createInput(this, 8);
    b = UnsignedInteger.createInput(this, 8);
    c = UnsignedInteger.createInput(this, 8);
    d = UnsignedInteger.createInput(this, 8);















  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();









  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();



















  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();

















  }
  public void outsource() {
    // Entry point for the circuit. Input and witness arrays/structs must be instantiated outside this method 
    UnsignedInteger[] sBox = UnsignedInteger.instantiateFrom(8, SBOX);
    sBoxMem = new SmartMemory(sBox, UnsignedInteger.__getClassRef(), new Object[]{"8"});
    a.xorBitwise(b).forceEqual(c);
    sBoxMem.read(a).mul(UnsignedInteger.instantiateFrom(8, x)).forceEqual(d);
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
